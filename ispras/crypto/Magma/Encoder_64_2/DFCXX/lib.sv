// This file has been automatically generated by Utopia HLS at 16-5-2025 20:56:24.

module __FIFO_IN_32_OUT_32_62 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[61:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 61; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[61];
endmodule // __FIFO_IN_32_OUT_32_62

module __FIFO_IN_32_OUT_32_60 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[59:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 59; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[59];
endmodule // __FIFO_IN_32_OUT_32_60

module __FIFO_IN_32_OUT_32_58 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[57:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 57; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[57];
endmodule // __FIFO_IN_32_OUT_32_58

module __FIFO_IN_32_OUT_32_56 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[55:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 55; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[55];
endmodule // __FIFO_IN_32_OUT_32_56

module __FIFO_IN_32_OUT_32_54 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[53:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 53; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[53];
endmodule // __FIFO_IN_32_OUT_32_54

module __FIFO_IN_32_OUT_32_52 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[51:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 51; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[51];
endmodule // __FIFO_IN_32_OUT_32_52

module __FIFO_IN_32_OUT_32_50 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[49:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 49; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[49];
endmodule // __FIFO_IN_32_OUT_32_50

module __FIFO_IN_32_OUT_32_48 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[47:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 47; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[47];
endmodule // __FIFO_IN_32_OUT_32_48

module __FIFO_IN_32_OUT_32_46 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[45:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 45; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[45];
endmodule // __FIFO_IN_32_OUT_32_46

module __FIFO_IN_32_OUT_32_44 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[43:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 43; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[43];
endmodule // __FIFO_IN_32_OUT_32_44

module __FIFO_IN_32_OUT_32_42 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[41:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 41; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[41];
endmodule // __FIFO_IN_32_OUT_32_42

module __FIFO_IN_32_OUT_32_40 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[39:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 39; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[39];
endmodule // __FIFO_IN_32_OUT_32_40

module __FIFO_IN_32_OUT_32_38 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[37:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 37; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[37];
endmodule // __FIFO_IN_32_OUT_32_38

module __FIFO_IN_32_OUT_32_36 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[35:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 35; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[35];
endmodule // __FIFO_IN_32_OUT_32_36

module __FIFO_IN_32_OUT_32_34 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[33:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 33; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[33];
endmodule // __FIFO_IN_32_OUT_32_34

module __FIFO_IN_32_OUT_32_32 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[31:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 31; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[31];
endmodule // __FIFO_IN_32_OUT_32_32

module __FIFO_IN_32_OUT_32_30 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[29:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 29; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[29];
endmodule // __FIFO_IN_32_OUT_32_30

module __FIFO_IN_32_OUT_32_28 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[27:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 27; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[27];
endmodule // __FIFO_IN_32_OUT_32_28

module __FIFO_IN_32_OUT_32_26 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[25:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 25; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[25];
endmodule // __FIFO_IN_32_OUT_32_26

module __FIFO_IN_32_OUT_32_24 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[23:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 23; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[23];
endmodule // __FIFO_IN_32_OUT_32_24

module __FIFO_IN_32_OUT_32_22 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[21:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 21; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[21];
endmodule // __FIFO_IN_32_OUT_32_22

module __FIFO_IN_32_OUT_32_20 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[19:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 19; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[19];
endmodule // __FIFO_IN_32_OUT_32_20

module __FIFO_IN_32_OUT_32_18 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[17:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 17; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[17];
endmodule // __FIFO_IN_32_OUT_32_18

module __FIFO_IN_32_OUT_32_16 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[15:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 15; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[15];
endmodule // __FIFO_IN_32_OUT_32_16

module __FIFO_IN_32_OUT_32_14 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[13:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 13; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[13];
endmodule // __FIFO_IN_32_OUT_32_14

module __FIFO_IN_32_OUT_32_12 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[11:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 11; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[11];
endmodule // __FIFO_IN_32_OUT_32_12

module __FIFO_IN_32_OUT_32_10 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[9:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 9; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[9];
endmodule // __FIFO_IN_32_OUT_32_10

module __FIFO_IN_32_OUT_32_8 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[7:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 7; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[7];
endmodule // __FIFO_IN_32_OUT_32_8

module __FIFO_IN_32_OUT_32_6 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[5:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 5; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[5];
endmodule // __FIFO_IN_32_OUT_32_6

module __FIFO_IN_32_OUT_32_4 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[3:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 3; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[3];
endmodule // __FIFO_IN_32_OUT_32_4

module __FIFO_IN_32_OUT_32_2 (input [31:0] arg1, output [31:0] res1, input clk);
  reg [31:0] r[1:0];

  integer i;
  always @ (posedge clk) begin
    for (i = 1; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1;
  end
  assign res1 = r[1];
endmodule // __FIFO_IN_32_OUT_32_2


module __CAST_IN_bits_32_OUT_fix_0_32_0_0 (input [31:0] arg1, output [31:0] res1, input clk);
  wire [31:0] cat;

  assign cat = {{0{1'h0}}, arg1};
  assign res1 = cat[31:0];
endmodule // __CAST_IN_bits_32_OUT_fix_0_32_0_0




module __ADD_IN_fix_0_32_0_IN_fix_0_32_0_OUT_fix_0_32_0_2 (input [31:0] arg1, input [31:0] arg2, output [31:0] res1, input clk);
  reg [31:0] r[1:0];
  wire [31:0] cat;

  wire [31:0] arg1_prepared;
  wire [31:0] arg2_prepared;

  assign arg1_prepared = {{0{1'h0}}, arg1};
  assign arg2_prepared = {{0{1'h0}}, arg2};

  integer i;
  always @ (posedge clk) begin
    for (i = 1; i != 0; i = i - 1) begin
      r[i] <= r[i - 1];
    end
    r[0] <= arg1_prepared + arg2_prepared;
  end
  assign cat = {{0{1'h0}}, r[1]};
  assign res1 = cat[31:0];
endmodule // __ADD_IN_fix_0_32_0_IN_fix_0_32_0_OUT_fix_0_32_0_2


